## CSE 331 hw-graph Part 2 Questions

NOTE: This file is used as part of hw-graph-part2, and is not due as part of the hw-graph-part1
submission. You may leave it blank for hw-graph-part1.

## Part 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of nodes and a collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of nodes, whether there 
       is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).
    A. The advantage of using a collection of nodes and a collection of edges for a graph is that
it would be quite simple to implement adding or removing a node/edge would have a runtime
complexity of O(1), however, when it comes to searching for a node/edge, the runtime complexity
would be O(n). It would also use more space as it has 2 data structures to store the nodes and edges

    B. The advantage of using an adjacent list for a graph ADT would be that adding a node/edge
would have a  runtime complexity of O(1), however, searching the adjacent lists would have
a runtime complexity of O(N). It would also use more space as it has 2 data structures to store
the nodes and edges

    C. The advantage of using an adjacency matrix for a graph ADT would be that it is only using
"one" (a 2d array) data structure to store the nodes and edges. Adding a node/edge would have a
runtime complexity of O(1), however, searching the adjacent lists would have a runtime complexity
of O(N^2) as it would be searching a 2D array. It would also be quite confusing to implement.

2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.
    I chose to use a Map that stored nodes and a collection of edges or my graph ADT. The advantage
of this is that searching the Map would be relatively quickly O(1) and adding a node/edge would
also be fast, O(1). However, this method is more complex to implement than the other methods



## Part 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.

    I added a test that tests the functionality of hash code in Edge. I also had to change the test
methods for graph.containsEdge() as I had to change the parameters for graph.containsEdge(). I had
to change graph.containsEdge() because I was only searching for the node and the edgeLabel and in
order to check if the graph contained an edge, I also needed the destination node. I also added
JUnit tests that attempted to modify the graph through observer methods. I added this test to
ensure that the graph ADT was really protected. I also added another test script that tested
the observer methods to see if I added another node/edge, it would be able to print that node
or edge.

2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.
    I changed the specification for the method for graph.containsEdge(). I had to change the
specification because the original specification did not search for the edge with a destination
node. I also moved the edge class into a subclass within Graph simply because it made more sense
as an Edge is useless without the graph.
