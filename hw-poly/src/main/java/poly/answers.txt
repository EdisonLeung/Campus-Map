## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode

r = q * p:
    set r = empty polynomial
    { inv: r = (q_0 + q_1 +...+ q_i-1) * p where q_i is the ith term in q }
    foreach term, t_q, in q:
        { inv: r = t_q * (p_0 + p_1 +...+ p_k-1) where p_k is the kth term in p }
        foreach term, t_p, in p:
            set temp = product of t_q and t_p
            if any term, t_r, in r has the same degree as temp,
                then replace t_r in r with sum of temp and t_r
                else insert temp into r as a new term

2. Division Pseudocode

r = q / p (truncated)
    set temp = q by making a term-by-term copy of all terms in q to temp
    set r = emptyPoly
    { inv: r * p + temp = q }
    while temp.size != 0 && highest degree of p <= highest degree of temp:
        div = temp_0 / p_0 by making term by getting quotients of coefficient of temp_0 and p_0 and quotient of degree of temp_0 and p_0
        insert div into r as a new term
        remainder = p * div by using multiplication method defined above to get product of p and div
        set temp = temp - remainder by using subtraction method defined previously


3. Division Example: (x^3+x-1) / (x+1) = x^2-x+2
    q = (x^3+x-1)
    p = (x+1)
    temp = copy of q = (x^3+x-1)
    r = emptyPoly
    while temp.size != 0 && highest degree of p (p_h) <= highest degree temp (temp_h):
        Iteration 1: q = (x^3+x-1), p = (x+1), temp = (x^3+x-1), r = empty polynomial, p_h = x, temp_h = x^3, temp.size = 3
            [is temp.size != 0 && p_h <= temp_h] YES so continue
            div = x^2, r = x^2, remainder = x^3 + x^2, temp = -x^2+x-1
        Iteration 2: q = (x^3+x-1), p = (x+1), temp = (-x^2+x-1), r = x^2, p_h = x, temp_h = -x^2, temp.size = 3
            [is temp.size != 0 && p_h <= temp_h] YES so continue
            div = -x, r = x^2-x, remainder = -x^2-x, temp = 2x-1
        Iteration 3: q = (x^3+x-1), p = (x+1), temp = (2x-1), r = (x^2-x), p_h = x, temp_h = 2x, temp.size = 2
            [is temp.size != 0 && p_h <= temp_h] YES so continue
            div = 2, r = (x^2-x+2), remainder = 2x+1, temp = -2
        Iteration 4: q = (x^3+x-1), p = (x+1), temp = -2, r = (x^2-x+2), p_h = x, temp_h = -2, temp.size = 1
            [is temp.size != 0 && p_h <= temp_h] NO, temp_h > p_h, so stop
    finish r = x^2-x+2

## Part 1
###########################################################################

1. Weakened Rep Invariant

    checkRep() would no longer need to check for the greatest common denominator (gcd()). This
would make the code more readable and the execution efficiency would be slightly faster

    RatNum(int n, int d) would no longer need to reduce the fraction inside the method. Since it
doesn't need to call gcd(), code execution efficiency and readability increases.

    equals() would also have to reduce both fractions in order to check if the fractions are
equal. This would decrease code efficiency and readability.

    toString() would have to call gcd() as it would have to reduce the fraction. This would
decrease code efficiency and readability.


2. Alternate add, sub, mul, div

    Since the methods contain @spec.returns and the class is immutable, it shouldn't have an
@spec.effects clause and therefore, it should not change anything. It would also not be
able to check the representation invariant which makes it fail to meet the class specifications

3. Constructor checkReps

    All the public methods cannot change the fields of RatNum and the methods that return a new
RatNum call the constructor method which checks the invariant. Thus, no method could ever modify
or violate the rep invariant as there is no need to call checkRep() everywhere.

## Part 2
###########################################################################

1. Calls to checkRep in RatTerm
    I only called it at the end of the constructor method because all the methods return immutable
objects or variables and the methods that return a RatTerm that has the potential to be mutated
return a newRate term which calls checkRep(). This ensures that checkRep() is always being called
and thus, there is only need to call checkRep() at the end of the constructor method.

2. Weakened Representation Invariant
    RatTerm() would not need to check if the coefficient was 0. This makes the code very slightly
more readable but does not improve overall code execution efficiency

    checkRep() would not need to check if the coefficient and exponent were 0. This does not impact
either readability or code execution efficiency

    toString() would need to account for the possibility of a 0 coefficient and a non-zero
exponent and would need to be able to ignore printing the exponent if the coefficient was 0.
This would increase the readability and reduce the code execution efficiency.

3. New Representation Invariant
    checkRep() would need to check if the exponent was 0 if the coefficient is NaN. This
does not change the readability or the code execution efficiency in any significant way.

    other than checkRep(), no other code would be affected because the code specifications
already ignore/have exceptions for the cases when the coefficient is NaN

## Part 3
###########################################################################

1. Calls to checkRep in RatPoly
    I only called checkRep() in the constructor method because every method that returns something
will return an immutable variable. The methods return a RatPoly return a new RatPoly which calls
the constructor method, thus ensuring that every method checks the representation invariant.

2. Separate Lists to track RatNum
    The advantages of using 2 separate lists is that we would not need a RatTerm class to track the
terms, and it would be easier to work with the separate components when using math operations.
However, without the RatTerm class, the terms would be much less protected and would not be able
to check their Representation Invariants as easily. As a result, using the RatTerm class would
be better and more effective.



