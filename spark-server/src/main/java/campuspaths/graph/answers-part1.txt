## CSE 331 hw-graph Part 1 Questions

## Part 1
###########################################################################

a. Write an AF and RI for IntQueue1 and IntQueue2.

    ### IntQueue1

    Abstraction Function:
        The Nth element from the beginning of the Queue = entries.get(n) where the
        first element of the list is at the front of the queue
        If no elements in entries, then it is just an empty Queue

    Representation Invariant:
        entries != null &&
        forall i such that (0 <= i < length(entries)), entries.get(i) != null
        In other words:
        * No element in entries is null

    ### IntQueue2

    Abstraction Function:
        Queue is empty if size == 0
        front = i, size = n
        if i + n <= entries.length, then Queue = [entries[i], entries[i+1],..., entries[i-1+n]]
        else, then Queue = [entries[i],..., entries[entries.length-1],
               entries[0],..., entries[((i+n) % entries.length)-1]]
        In other words:
        * The first item in Queue is entries[i],
          The next item in Queue is entries[i+1],
          ...
          The last element in Queue is entries[i-1+n]; but if front + size exceeds entries.length
            then the following elements in Queue would be entries[0...k] where k is the number of
            elements that need to be added after i+n has exceeded entries.length


    Representation Invariant:
        entries != null &&
        size >= 0 &&
        front >= 0 &&
        front < entries.length

b. Group the snapshots of IntQueue2's internal state into groups that have the same abstract state.
    a, d, and g, are equivalent to each other
    b and h are equivalent to each other
    c and f are equivalent to each other

c. For each signature below, state and justify in 1-2 sentences (per part) whether the method or constructor
could possibly expose the representation, given the information available. Explain any assumptions you made.

    1. `public int solveEquations(int x, int y, int z)`
            This does not expose the representation invariant since this method only takes and
            returns a primitive type which is not a mutable object

    2. `public String[] decode(boolean slowly)`
            This has the possibility to expose the representation invariant because it returns a
            String array and the array is mutable so it could expose the invariant.

    3. `private Date myBirthday()`
            This has the possibility to expose the representation invariant because it returns
            Date which I assumed is a mutable object

    4. `public String toString()`
            This does not expose the representation invariant since it returns a String which
            is an immutable object

    5. `public Iterator<Integer> elements()`
            This has the possibility to expose the representation invariant because it returns
            and Iterator object which can be mutable. This is under the assumption that the method
            returns a reference to the original object and not a copy

    6. `public Deck(List<Card> cards)`
            This has the possibility to expose the representation invariant because the client
            could edit cards and violate the rep invariant. It also returns a Deck object which, if
            it is mutable, then it would expose the rep invariant



## Part 2
###########################################################################

Briefly explain why you included the operations you did and why you feel they are a sufficient
interface to a graph. If your design includes multiple classes or interfaces, explain why you
included each one; if not, explain whether you considered additional classes and why you decided
not to include them.

    In order to create a Directed Labeled Graph, I created 2 different classes. The first class,
Edge.java, represents a label edge of a Directed Labeled Graph. This class only included a
constructor method, getter methods, an equals method, and compareTo method (implementation of the
comparable interface). I did not include setter methods because the hw6 only requires edges and
nodes to be created and put into the graph and they do not need to be changed. The 2nd class,
Graph.java represents the whole Directed Labeled Graph. This class only includes the ability to add
nodes and edges, check if the graph contains a certain node or edge, and the ability to view the
nodes and edges. I kept a more simplistic design with the graph as this should be enough for hw6
and it leaves me the ability to add more things if needed without making major changes.

## Part 3
###########################################################################

What was your testing strategy for this assignment? How do your script tests and JUnit tests
differ from each other (if they do), and why?
    My testing strategy for this assignment was mainly prioritized around the script tests for the
overall functionality for the program. I used the "0, 1, 2" testing strategy for my script tests.
I had several script tests for testing basic operations such as creating a graph, adding nodes, and
adding edges. I then had other scripts test for more complex graphs such as graphs where the nodes
have an edge pointing to themselves and a node with several edges pointing to the same node. I
implemented enough test scripts so that if they all pass, I will have confidence that the basic
functionality of my code works. My JUnit tests differed from the script tests as I tested the
specifications in them. The JUnit tests did not test the functionality of the code such as adding
Nodes but rather tested edge cases and cases that the specifications outlined. As a result, if
both script tests and JUnit tests pass, I will have the confidence that the functionality of the
code works and the code follows all the specs properly.



